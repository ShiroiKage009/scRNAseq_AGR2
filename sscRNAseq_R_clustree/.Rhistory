install.packages("clustree")
library(SeuratDisk)
library(clustree)
library(Seurat)
Convert('S:\data cache\code_in_out\agr2\script_4_out\antrum_iso.h5ad', dest = 'h5adseurat')
Convert('S:/data cache/code_in_out/agr2/script_4_out/antrum_iso.h5ad', dest = 'h5adseurat')
Convert('S:/data cache/code_in_out/agr2/script_4_out/antrum_iso.h5ad', dest = 'h5adseurat', overwrite = 1)
Convert('S:/data cache/code_in_out/agr2/script_4_out/antrum_iso.h5ad', dest = 'h5seurat')
Convert(path + 'antrum_iso.h5ad', dest = 'h5seurat')
path = 'S:/data cache/code_in_out/agr2/script_4_out/'
Convert(path + 'antrum_iso.h5ad', dest = 'h5seurat')
Convert((path + 'antrum_iso.h5ad'), dest = 'h5seurat')
Convert(path+'antrum_iso.h5ad', dest = 'h5seurat')
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
Convert(work_path+'antrum_iso.h5ad', dest = 'h5seurat')
h5ad_path = work_path + 'test'
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
Convert(paste(work_path, 'antrum_iso.h5ad'), dest = 'h5seurat')
Convert(paste(work_path,'antrum_iso.h5ad'), dest = 'h5seurat')
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat')
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
object = LoadH5Seurat(paste0(work_path, 'antrum_iso.h5seurat'))
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
object = LoadH5Seurat(paste0(work_path, 'antrum_iso.h5seurat'))
library(SeuratDisk)
library(clustree)
library(Seurat)
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
library(SeuratDisk)
library(clustree)
library(Seurat)
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1)
Convert(paste0(work_path,'antrum_iso.h5ad'), dest = 'h5seurat', overwrite = 1, source = 'anndata')
library(zellkonverter)
zellkonverter::readH5AD(paste0(work_path,'antrum_iso.h5ad')
)
test_obj = zellkonverter::readH5AD(paste0(work_path,'antrum_iso.h5ad'))
test_obj_2 = as.Seurat(test_obj)
test_obj_2 = as.Seurat(test_obj, assay = 'rnaseq')
test_obj_2 = as.Seurat(test_obj)
test_obj_2 = as.Seurat(test_obj, counts = 'counts')
test_obj_2 = as.Seurat(test_obj)
BiocManager::install('SingeCellExperiment')
library(SingleCellExperiment)
assayNames(test_obj)
test_obj_2 = as.Seurat(test_obj, counts = 'X')
test_obj_2 = as.Seurat(test_obj, counts = 'X', logcounts = 'X')
# Convert using 'X' as counts and no data
test_obj_2 <- as.Seurat(test_obj, counts = 'X', data = NULL)
RidgePlot(test_obj_2, features = 'AGR2')
RidgePlot(test_obj_2, features = c('AGR2', 'MUC5AC'))
RidgePlot(test_obj_2, features = c('AGR2', 'MUC5AC'), ncol = 2)
clustree::clustree(test_obj_2)
clustree(test_obj_2, node_colour = "seurat_clusters", node_alpha = 0.8)
clustree(test_obj_2)
test_obj_2 = FindClusters(test_obj_2, algorithm = 4)
test_obj_2 = FindNeighbors(test_obj_2, dims = 1:50)
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
test_obj = zellkonverter::readH5AD(paste0(work_path,'antrum_iso.h5ad'))
# Convert using 'X' as counts and no data
test_obj_2 <- as.Seurat(test_obj)
# Convert using 'X' as counts and no data
test_obj_2 <- as.Seurat(test_obj, counts = 'X', data = NULL)
clustree(test_obj_2)
test_obj_2 = FindNeighbors(test_obj_2, dims = 1:50)
test_obj_2 = FindClusters(test_obj_2, algorithm = 4)
test_obj_2 = NormalizeData(test_obj_2, normalization.method = 'LogNormalize')
test_obj_2 = FindVariableFeatures(test_obj_2, selection.method = 'vst')
test_obj_2 = ScaleData(test_obj_2, vars.to.regress = c("percent.mt", "S.Score", "G2M.Score"))
test_obj_2 = ScaleData(test_obj_2)
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2))
# Perform PCA
test_obj_2 = RunPCA(test_obj_2)
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2))
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
test_obj = zellkonverter::readH5AD(paste0(work_path,'antrum_iso.h5ad'))
# Convert using 'X' as counts and no data
test_obj_2 <- as.Seurat(test_obj, counts = 'X', data = NULL)
test_obj_2 = FindNeighbors(test_obj_2, dims = 1:50)
test_obj_2 = NormalizeData(test_obj_2, normalization.method = 'LogNormalize')
test_obj_2 = FindVariableFeatures(test_obj_2, selection.method = 'vst')
test_obj_2 = ScaleData(test_obj_2)
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2))
test_obj_2 = FindVariableFeatures(test_obj_2, selection.method = 'vst', nfeatures = 2000)
test_obj_2 = ScaleData(test_obj_2)
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2))
work_path = 'S:/data cache/code_in_out/agr2/script_4_out/'
test_obj = zellkonverter::readH5AD(paste0(work_path,'antrum_iso.h5ad'))
# Convert using 'X' as counts and no data
test_obj_2 <- as.Seurat(test_obj, counts = 'X', data = NULL)
test_obj_2 = NormalizeData(test_obj_2, normalization.method = 'LogNormalize')
test_obj_2 = FindVariableFeatures(test_obj_2, selection.method = 'vst')
# Identify zero-variance genes
zero_variance_genes <- names(which(apply(test_obj_2@assays$RNA@data, 1, var) == 0))
# Remove zero-variance genes from the Seurat object
test_obj_2 <- subset(test_obj_2, features = setdiff(rownames(test_obj_2), zero_variance_genes))
print(test_obj_2@assays)
# Identify zero-variance genes
zero_variance_genes <- names(which(apply(test_obj_2@assays$originalexp@data, 1, var) == 0))
# Remove zero-variance genes from the Seurat object
test_obj_2 <- subset(test_obj_2, features = setdiff(rownames(test_obj_2), zero_variance_genes))
test_obj_2 = ScaleData(test_obj_2)
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2))
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2), assay = 'originalexp')
# Perform PCA
test_obj_2 = RunPCA(test_obj_2, features = VariableFeatures(object = test_obj_2), assay = originalexp)
# Install clustree if you haven't already
install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
View(clustree_data)
# Install clustree if you haven't already
install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
View(clustree_data)
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
View(clustree_data)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
View(clustree_data)
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
View(clustree_data)
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_4_out/clustree_prep.csv")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
# Install clustree if you haven't already
# install.packages("clustree")
library(clustree)
# Read the CSV file
clustree_data <- read.csv("S:/data cache/code_in_out/agr2/script_7_out/all_leidens_20241115_clustree_prep.csv")
# Use gsub to replace underscores in the numeric part of the column names
colnames(clustree_data) <- gsub("leiden_(\\d+)_(\\d+)", "leiden_\\1.\\2", colnames(clustree_data))
# Generate the clustree plot
clustree(clustree_data, prefix = "leiden_")
